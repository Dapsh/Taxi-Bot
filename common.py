from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state

import keyboards as kb
from db import Database
from config import MESSAGES

# Initialize router and database
router = Router()
db = Database()

# States
class CommonStates(StatesGroup):
    waiting_for_help_query = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handler for the /start command"""
    # Reset any active state
    await state.clear()
    
    # Check if user is already registered
    user = await db.get_user(message.from_user.id)
    
    if user:
        # User exists, show appropriate menu
        if user['role'] == 'driver':
            await message.answer(MESSAGES["main_menu"], reply_markup=kb.get_driver_menu())
        else:
            await message.answer(MESSAGES["main_menu"], reply_markup=kb.get_passenger_menu())
    else:
        # New user, show role selection
        await message.answer(MESSAGES["welcome"], reply_markup=kb.get_role_keyboard())

@router.callback_query(F.data == "help")
async def help_menu(callback: CallbackQuery, state: FSMContext):
    """Handler for help menu"""
    await callback.answer()
    
    help_text = (
        "üìã <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ Fifty Drive</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        
        "<b>–î–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b>\n"
        "‚Ä¢ –ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏, –≤—ã–±–µ—Ä–∏—Ç–µ '–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n"
        "‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∏ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø–æ–µ–∑–¥–∫–∏\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ '–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑'\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ\n\n"
        
        "<b>–î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã' —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å'\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö\n\n"
        
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –Ω–∏–∂–µ:"
    )
    
    await callback.message.answer(help_text, parse_mode="HTML")
    await state.set_state(CommonStates.waiting_for_help_query)

@router.message(StateFilter(CommonStates.waiting_for_help_query))
async def process_help_query(message: Message, state: FSMContext):
    """Process help query from user"""
    # In a real bot, this could forward the message to support or provide specific help
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        reply_markup=kb.get_back_to_menu()
    )
    await state.clear()

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """Handler to return to the main menu"""
    await callback.answer()
    
    # Clear any active state
    await state.clear()
    
    # Check user role
    user = await db.get_user(callback.from_user.id)
    
    if user['role'] == 'driver':
        await callback.message.answer(MESSAGES["main_menu"], reply_markup=kb.get_driver_menu())
    else:
        await callback.message.answer(MESSAGES["main_menu"], reply_markup=kb.get_passenger_menu())

@router.callback_query(F.data == "my_rating")
async def show_rating(callback: CallbackQuery):
    """Show user's current rating"""
    await callback.answer()
    
    user = await db.get_user(callback.from_user.id)
    rating = user['rating']
    
    # Format rating with stars
    stars = "‚≠ê" * int(rating) + ("‚ú®" if rating % 1 >= 0.5 else "")
    
    await callback.message.answer(
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating:.1f} {stars}",
        reply_markup=kb.get_back_to_menu()
    )

# Helper function to format order for display
async def format_order_info(order, include_user_info=False):
    """Format order information for display"""
    if not order:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    status_emoji = {
        'pending': '‚è≥',
        'accepted': '‚úÖ',
        'driver_started': 'üöó',
        'driver_arrived': 'üèÅ',
        'in_progress': 'üöï',
        'completed': 'üèÜ',
        'cancelled': '‚ùå'
    }
    
    status_text = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è',
        'accepted': '–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑',
        'driver_started': '–í–æ–¥–∏—Ç–µ–ª—å –≤ –ø—É—Ç–∏',
        'driver_arrived': '–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª',
        'in_progress': '–ü–æ–µ–∑–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    
    # Basic order info
    result = (
        f"<b>–ó–∞–∫–∞–∑ #{order['order_id']}</b>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji.get(order['status'], '')} {status_text.get(order['status'], order['status'])}\n"
        f"<b>–û—Ç:</b> {order['from_address']}\n"
        f"<b>–î–æ:</b> {order['to_address']}\n"
        f"<b>–ö–ª–∞—Å—Å:</b> {'–ö–æ–º—Ñ–æ—Ä—Ç' if order['ride_class'] == 'comfort' else '–≠–∫–æ–Ω–æ–º'}\n"
        f"<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {order['distance']} –∫–º\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order['actual_cost'] or order['estimated_cost']} —Ä—É–±.\n"
    )
    
    # Add timestamps if available
    if order['created_at']:
        result += f"<b>–°–æ–∑–¥–∞–Ω:</b> {order['created_at'][:16].replace('T', ' ')}\n"
    
    if order['started_at']:
        result += f"<b>–ù–∞—á–∞—Ç:</b> {order['started_at'][:16].replace('T', ' ')}\n"
        
    if order['completed_at']:
        result += f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω:</b> {order['completed_at'][:16].replace('T', ' ')}\n"
    
    # Add rating info if available
    if order['passenger_rating']:
        result += f"<b>–û—Ü–µ–Ω–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞:</b> {'‚≠ê' * order['passenger_rating']}\n"
        
    if order['driver_rating']:
        result += f"<b>–û—Ü–µ–Ω–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è:</b> {'‚≠ê' * order['driver_rating']}\n"
    
    # Add user info if requested and available
    if include_user_info:
        # In a real bot, you would fetch and include user info here
        pass
        
    return result